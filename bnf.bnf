<string_char> ::= [a-z] | [A-Z] | [0-9] | " " | "!" | "#" 
                | "$" | "%" | "&" | "(" | ")" | "*" | "+" 
                | "," | "-" | "." | "/" | ":" | ";" | "<" 
                | "=" | ">" | "?" | "@" | "[" | "]" | "^" 
                | "_" | "`" | "{" | "|" | "}" | "~" | "\\n" 
                | "\\t" | "\\r" | "\\\"" | "\\'"  | "\\\\"

<string_literal> ::= "\"" (<string_char>)* "\""
<integer_literal> ::= "0" | ([1-9]+ [0-9])*
<identifier> ::= ([a-z] | [A-Z])+ ([0-9] | "_")*

<var> ::= <identifier>
<funcname> ::= <identifier>
<classname> ::= <identifier>
<methodname> ::= <identifier>

<str> ::= <string_literal>
<i> ::= <integer_literal>
<type> ::= "Int" | "Str" | "Boolean" | "Void" | <classname>
<comma_exp> ::= (<exp> ("," <exp>)*)*

<primary_exp> ::= <var>
                | <str>
                | <i>
                | "(" <exp> ")" 
                | "this"
                | "true" 
                | "false"
                | "println" "(" <exp> ")" 
        | "print" "(" <exp> ")" 
                | <funcname> "(" <comma_exp> ")"
                | "new" <classname> "(" <comma_exp> ")"
                
<call_exp> ::= <primary_exp> ("." <methodname> "(" <comma_exp> ")")*
<mult_exp> ::= <call_exp> (("*" | "/") <call_exp>)*
<add_exp> ::= <mult_exp> (("+" | "-") <mult_exp>)*
<exp> ::= <add_exp>

<vardec> ::= "let" <var> ":" <type> 
<paramdec> ::= <var> ":" <type>

<comma_vardec> ::= (<vardec> ("," <vardec>)*)*
<comma_paramdec> ::= (<paramdec> ("," <paramdec>)*)*

<stmt> ::= <exp> ";"
        | <vardec> ";"
        | <var> "=" <exp> ";"
        | "let" <var> ":" <type> "=" <exp> ";"
        | "while" "(" <exp> ")" <stmt>
        | "break" ";"
        | "return" <exp>* ";"
        | "if" "(" <exp> ")" <stmt> ("else" <stmt>)*
        | "{" <stmt>* "}"
        

<funcdef> ::= "fun" <funcname> "(" <comma_paramdec> ")" "->" <type>   "{" <stmt>* "}"

<methoddef> ::= "meth" <methodname> "(" <comma_paramdec> ")" "->" <type> "{" <stmt>* "}"

<constructor> ::= "init" "(" <comma_paramdec> ")" "{"
                ("super" "(" <comma_exp> ")" ";")*
                <stmt>* "}"
   
<classdef> ::= "class" <classname> ("extends" <classname>) 
            "{"
              (<vardec> ";")*
              <constructor> 
              <methoddef>*
            "}"

<program> ::= (<classdef> | <funcdef>)* <stmt>+



